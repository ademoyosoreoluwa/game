{"ast":null,"code":"import{useState}from'react';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";function Square(_ref){let{value,onSquareClick,isWinningSquare}=_ref;return/*#__PURE__*/_jsx(\"button\",{className:`square ${isWinningSquare?'winning-square':''}`,onClick:onSquareClick,children:value});}function Board(_ref2){let{xIsNext,squares,onPlay,onReset}=_ref2;const{winner,winningLine}=calculateWinner(squares);let status=winner==='draw'?'No winner: Restart the game.':winner?'Winner: '+winner:'Player: '+(xIsNext?'1':'2');function handleClick(i){if(winner||squares[i])return;const nextSquares=squares.slice();nextSquares[i]=xIsNext?'♟️':'⚜️';onPlay(nextSquares);}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"status\",children:status}),/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:squares.slice(0,3).map((square,i)=>/*#__PURE__*/_jsx(Square,{value:square,onSquareClick:()=>handleClick(i),isWinningSquare:winningLine.includes(i)},i))}),/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:squares.slice(3,6).map((square,i)=>/*#__PURE__*/_jsx(Square,{value:square,onSquareClick:()=>handleClick(i+3),isWinningSquare:winningLine.includes(i+3)},i+3))}),/*#__PURE__*/_jsx(\"div\",{className:\"board-row\",children:squares.slice(6,9).map((square,i)=>/*#__PURE__*/_jsx(Square,{value:square,onSquareClick:()=>handleClick(i+6),isWinningSquare:winningLine.includes(i+6)},i+6))}),winner&&/*#__PURE__*/_jsx(\"button\",{onClick:onReset,children:\"Restart Game\"})]});}export default function Game(){const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);const xIsNext=currentMove%2===0;const currentSquares=history[currentMove];function handlePlay(nextSquares){const nextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);}function jumpTo(nextMove){setCurrentMove(nextMove);}function resetGame(){setHistory([Array(9).fill(null)]);setCurrentMove(0);}const moves=history.map((squares,move)=>{let description=move!==0?'Go to move No: '+move:'Begin the game !';return/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>jumpTo(move),children:description})},move);});return/*#__PURE__*/_jsxs(\"div\",{className:\"game\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:/*#__PURE__*/_jsx(Board,{xIsNext:xIsNext,squares:currentSquares,onPlay:handlePlay,onReset:resetGame})}),/*#__PURE__*/_jsx(\"div\",{className:\"game-info\",children:/*#__PURE__*/_jsx(\"ol\",{children:moves})})]});}function calculateWinner(squares){const lines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(let i=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){return{winner:squares[a],winningLine:[a,b,c]};}}if(!squares.includes(null))return{winner:'draw',winningLine:[]};return{winner:null,winningLine:[]};}// import { useState } from 'react';\n// function Square({ value, onSquareClick }) {\n//   return (\n//     <button className='square' onClick={onSquareClick}>\n//       {value}\n//     </button>\n//   );\n// }\n// function Board({ xIsNext, squares, onPlay, onReset }) {\n//   function handleClick(i) {\n//     if (calculateWinner(squares) || squares[i]) return;\n//     const nextSquares = squares.slice();\n//     nextSquares[i] = xIsNext ? '♟️' : '⚜️';\n//     // if (xIsNext) { \n//     //   nextSquares[i] = '♟️' ;\n//     // } else { \n//     //   nextSquares[i] = '⚜️';\n//     // }\n//     onPlay(nextSquares);\n//   }\n//   const winner = calculateWinner(squares);\n//   let status = (winner === 'draw')? 'No winner: Restart the game.' : winner? 'winner: ' + winner : 'Player: ' + (xIsNext ? '1' : '2');\n//   // let status;\n//   // if (winner === 'draw') {\n//   //   status = 'No winner: Restart the game.';\n//   // } else if (winner) {\n//   //   statue = 'Winner: ' + winner;  \n//   // } else {\n//   //   status = 'Player: ' + (xIsNext ? '1' : '2');\n//   // }\n//   return (\n//     <>\n//       <div className='status'>{status}</div>\n//       <div className='board-row'>\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className='board-row'>\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className='board-row'>\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//       {winner && <button onClick={onReset}>Restart Game</button>}\n//     </>\n//   );\n// }\n// export default function Game() {\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\n//   const [currentMove, setCurrentMove] = useState(0);\n//   const xIsNext = currentMove % 2 === 0;\n//   const currentSquares = history[currentMove];\n//   function handlePlay(nextSquares) {\n//     const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n//     setHistory(nextHistory);\n//     setCurrentMove(nextHistory.length - 1);\n//   }\n//   function jumpTo(nextMove) {\n//     setCurrentMove(nextMove);\n//   }\n//   function resetGame() {\n//     setHistory([Array(9).fill(null)]);\n//     setCurrentMove(0);\n//   }\n//   const moves = history.map((squares, move) => {\n//     let description = (move !== 0) ? 'Go to move No: ' + move : 'Begin the game !';\n//     // let description;\n//     // if (move > 0) {\n//     //   description = 'Go to move #' + move;\n//     // } else {\n//     //   description = 'Go to game start';\n//     // }\n//     return (\n//       <li key={move}>\n//         <button onClick={() => jumpTo(move)}>{description}</button>\n//       </li>\n//     );\n//   })\n//   return (\n//     <div className='game'>\n//       <div className='game-board'>\n//         <Board \n//           xIsNext={xIsNext} \n//           squares={currentSquares} \n//           onPlay={handlePlay}\n//           onReset={resetGame} \n//         />\n//       </div>\n//       <div className='game-info'>\n//         <ol>{moves}</ol>\n//       </div>\n//     </div>\n//   );\n// }\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6],\n//   ];\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) return squares[a];\n//   }\n//   if (!squares.includes(null)) return 'draw';\n//   return null; \n// }","map":{"version":3,"names":["useState","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Square","_ref","value","onSquareClick","isWinningSquare","className","onClick","children","Board","_ref2","xIsNext","squares","onPlay","onReset","winner","winningLine","calculateWinner","status","handleClick","i","nextSquares","slice","map","square","includes","Game","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","length","jumpTo","nextMove","resetGame","moves","move","description","lines","a","b","c"],"sources":["/Users/eagleseyes/Desktop/tic-tac/src/App.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction Square({ value, onSquareClick, isWinningSquare }) {\n  return (\n    <button className={`square ${isWinningSquare ? 'winning-square' : ''}`} onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board({ xIsNext, squares, onPlay, onReset }) {\n  const { winner, winningLine } = calculateWinner(squares);\n  let status = (winner === 'draw') ? 'No winner: Restart the game.' : winner ? 'Winner: ' + winner : 'Player: ' + (xIsNext ? '1' : '2');\n\n  function handleClick(i) {\n    if (winner || squares[i]) return;\n    const nextSquares = squares.slice();\n    nextSquares[i] = xIsNext ? '♟️' : '⚜️';\n    onPlay(nextSquares);\n  }\n\n  return (\n    <>\n      <div className='status'>{status}</div>\n      <div className='board-row'>\n        {squares.slice(0, 3).map((square, i) => (\n          <Square\n            key={i}\n            value={square}\n            onSquareClick={() => handleClick(i)}\n            isWinningSquare={winningLine.includes(i)}\n          />\n        ))}\n      </div>\n      <div className='board-row'>\n        {squares.slice(3, 6).map((square, i) => (\n          <Square\n            key={i + 3}\n            value={square}\n            onSquareClick={() => handleClick(i + 3)}\n            isWinningSquare={winningLine.includes(i + 3)}\n          />\n        ))}\n      </div>\n      <div className='board-row'>\n        {squares.slice(6, 9).map((square, i) => (\n          <Square\n            key={i + 6}\n            value={square}\n            onSquareClick={() => handleClick(i + 6)}\n            isWinningSquare={winningLine.includes(i + 6)}\n          />\n        ))}\n      </div>\n      {winner && <button onClick={onReset}>Restart Game</button>}\n    </>\n  );\n}\n\nexport default function Game() {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  function resetGame() {\n    setHistory([Array(9).fill(null)]);\n    setCurrentMove(0);\n  }\n\n  const moves = history.map((squares, move) => {\n    let description = (move !== 0) ? 'Go to move No: ' + move : 'Begin the game !';\n\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className='game'>\n      <div className='game-board'>\n        <Board \n          xIsNext={xIsNext} \n          squares={currentSquares} \n          onPlay={handlePlay}\n          onReset={resetGame} \n        />\n      </div>\n      <div className='game-info'>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], winningLine: [a, b, c] };\n    }\n  }\n  if (!squares.includes(null)) return { winner: 'draw', winningLine: [] };\n  return { winner: null, winningLine: [] };\n}\n\n\n\n// import { useState } from 'react';\n\n// function Square({ value, onSquareClick }) {\n//   return (\n//     <button className='square' onClick={onSquareClick}>\n//       {value}\n//     </button>\n//   );\n// }\n\n// function Board({ xIsNext, squares, onPlay, onReset }) {\n//   function handleClick(i) {\n//     if (calculateWinner(squares) || squares[i]) return;\n//     const nextSquares = squares.slice();\n//     nextSquares[i] = xIsNext ? '♟️' : '⚜️';\n\n//     // if (xIsNext) { \n//     //   nextSquares[i] = '♟️' ;\n//     // } else { \n//     //   nextSquares[i] = '⚜️';\n//     // }\n\n//     onPlay(nextSquares);\n//   }\n\n//   const winner = calculateWinner(squares);\n//   let status = (winner === 'draw')? 'No winner: Restart the game.' : winner? 'winner: ' + winner : 'Player: ' + (xIsNext ? '1' : '2');\n\n//   // let status;\n//   // if (winner === 'draw') {\n//   //   status = 'No winner: Restart the game.';\n//   // } else if (winner) {\n//   //   statue = 'Winner: ' + winner;  \n//   // } else {\n//   //   status = 'Player: ' + (xIsNext ? '1' : '2');\n//   // }\n\n//   return (\n//     <>\n//       <div className='status'>{status}</div>\n//       <div className='board-row'>\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className='board-row'>\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className='board-row'>\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//       {winner && <button onClick={onReset}>Restart Game</button>}\n//     </>\n//   );\n// }\n\n// export default function Game() {\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\n//   const [currentMove, setCurrentMove] = useState(0);\n//   const xIsNext = currentMove % 2 === 0;\n//   const currentSquares = history[currentMove];\n\n//   function handlePlay(nextSquares) {\n//     const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n//     setHistory(nextHistory);\n//     setCurrentMove(nextHistory.length - 1);\n//   }\n\n//   function jumpTo(nextMove) {\n//     setCurrentMove(nextMove);\n//   }\n\n//   function resetGame() {\n//     setHistory([Array(9).fill(null)]);\n//     setCurrentMove(0);\n//   }\n\n//   const moves = history.map((squares, move) => {\n//     let description = (move !== 0) ? 'Go to move No: ' + move : 'Begin the game !';\n\n//     // let description;\n//     // if (move > 0) {\n//     //   description = 'Go to move #' + move;\n//     // } else {\n//     //   description = 'Go to game start';\n//     // }\n\n//     return (\n//       <li key={move}>\n//         <button onClick={() => jumpTo(move)}>{description}</button>\n//       </li>\n//     );\n//   })\n\n//   return (\n//     <div className='game'>\n//       <div className='game-board'>\n//         <Board \n//           xIsNext={xIsNext} \n//           squares={currentSquares} \n//           onPlay={handlePlay}\n//           onReset={resetGame} \n//         />\n//       </div>\n//       <div className='game-info'>\n//         <ol>{moves}</ol>\n//       </div>\n//     </div>\n//   );\n// }\n\n// function calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6],\n//   ];\n\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) return squares[a];\n//   }\n//   if (!squares.includes(null)) return 'draw';\n//   return null; \n// }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}